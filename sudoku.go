package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
)

func main() {
	scanner := bufio.NewScanner(os.Stdin)

	fmt.Println("üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –°—É–¥–æ–∫—É!")
	fmt.Println("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:")
	fmt.Println("  1 - –õ–µ–≥–∫–∏–π")
	fmt.Println("  2 - –°—Ä–µ–¥–Ω–∏–π")
	fmt.Println("  3 - –°–ª–æ–∂–Ω—ã–π")
	fmt.Print("–í–∞—à –≤—ã–±–æ—Ä: ")

	scanner.Scan()
	difficultyInput := scanner.Text()

	difficulty := 2
	if diff, err := strconv.Atoi(difficultyInput); err == nil && diff >= 1 && diff <= 3 {
		difficulty = diff
	}

	fmt.Println("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å—É–¥–æ–∫—É...")
	game := NewRandomGame(difficulty)

	fmt.Println("\n–ö–æ–º–∞–Ω–¥—ã:")
	fmt.Println("  A1 5 - –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–∏—Ñ—Ä—É 5 –≤ –∫–ª–µ—Ç–∫—É A1")
	fmt.Println("  clear A1 - –æ—á–∏—Å—Ç–∏—Ç—å –∫–ª–µ—Ç–∫—É A1")
	fmt.Println("  new - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É")
	fmt.Println("  quit - –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã")
	fmt.Println("  help - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å")

	for {
		game.Show()

		if game.isComplete() {
			fmt.Println("\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Ä–µ—à–∏–ª–∏ —Å—É–¥–æ–∫—É!")
			return
		}

		fmt.Print("\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ")
		scanner.Scan()
		command := scanner.Text()

		switch {

		case command == "quit":
			fmt.Println("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
			return

		case command == "help":
			fmt.Println("\n–ü–æ–º–æ—â—å:")
			fmt.Println("–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: [—Å—Ç–æ–ª–±–µ—Ü][—Å—Ç—Ä–æ–∫–∞] [—Ü–∏—Ñ—Ä–∞]")
			fmt.Println("  –°—Ç–æ–ª–±—Ü—ã: A-I (—Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ)")
			fmt.Println("  –°—Ç—Ä–æ–∫–∏: 1-9 (—Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑)")
			fmt.Println("  –ü—Ä–∏–º–µ—Ä: 'A1 5' - –ø–æ—Å—Ç–∞–≤–∏—Ç—å 5 –≤ –≤–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª")
			fmt.Println("  'clear A1' - –æ—á–∏—Å—Ç–∏—Ç—å –∫–ª–µ—Ç–∫—É A1")
			fmt.Println("  'new' - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É")
			continue

		case command == "new":
			fmt.Println("–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É...")
			game = NewRandomGame(difficulty)
			continue

		case strings.HasPrefix(command, "clear "):
			input := strings.TrimPrefix(command, "clear ")
			if len(input) < 2 {
				fmt.Println("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: clear A1")
				continue
			}

			colStr := strings.ToUpper(string(input[0]))
			if colStr < "A" || colStr > "I" {
				fmt.Println("—Å—Ç–æ–ª–±–µ—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç A –¥–æ I")
				continue
			}
			col := int(colStr[0] - 'A')

			rowStr := string(input[1])
			row, err := strconv.Atoi(rowStr)
			if err != nil {
				fmt.Println("—Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 9")
				continue
			}
			err = game.Clear(row-1, col)
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞: %v\n", err)
				continue
			} else {
				fmt.Println("‚úÖ –ö–ª–µ—Ç–∫–∞ –æ—á–∏—â–µ–Ω–∞")
			}

		default:
			row, column, digit, err := parseInput(command)
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: %v\n", err)
				fmt.Println("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è –ø–æ–º–æ—â–∏")
				continue
			}

			err = game.Set(row, column, digit)
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞: %v\n", err)
			} else {
				fmt.Println("‚úÖ –¶–∏—Ñ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
			}
		}
	}
}
